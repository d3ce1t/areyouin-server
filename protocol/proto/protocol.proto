syntax = "proto3";

package protocol;

option java_package = "es.peeple.areyouin.protocol";

import "core.proto";

//
// Modifiers
//

// CREATE EVENT
message CreateEvent {
  string message = 1;
  int64 start_date = 2;
  int64 end_date = 3;
  repeated uint64 participants = 4;
}

// CANCEL EVENT
message CancelEvent {
  uint64 event_id = 1;
  string reason = 2;
}

// INVITE USERS
message InviteUsers {
  uint64 event_id = 1;
  repeated uint64 participants = 2;
}

// CANCEL USERS INVITATION
message CancelUsersInvitation {
  uint64 event_id = 1;
  repeated uint64 participants = 2;
}

// CONFIRM ATTENDANCE
message ConfirmAttendance {
  uint64 event_id = 1;
  AttendanceResponse action_code = 2;
}

// MODIFY EVENT DATE
// MODIFY EVENT MESSAGE
// MODIFY EVENT
message ModifyEvent {
  uint64 event_id = 1;
  string message = 2;
  int64 start_date = 3;
  int64 end_date = 4;
}

// VOTE CHANGE
message VoteChange {
  uint64 event_id = 1;
  uint32 change_id = 2;
  bool accept_change = 3;
}

// USER POSITION
message UserPosition {
  Location global_coordinates = 1;
  float estimation_error = 2;
}

// USER POSITION RANGE
message UserPositionRange {
  float range_in_meters = 1;
}

// CREATE USER ACCOUNT
message CreateUserAccount {
  string name = 1;
  string email = 2;
  string password = 3;
  string phone = 4;
  string fbid = 5;   // Facebook User ID (unique for my app)
  string fbtoken = 6; // Facebook User Access Token (unique)
}

// NEW AUTH TOKEN
enum AuthType {
  A_NATIVE = 0;
  A_FACEBOOK = 1;
}

message NewAuthToken {
  string pass1 = 1; // E-mail or Facebook User ID
  string pass2 = 2; // Password or Facebook User Access Token
  AuthType type = 3;
}

// USER AUTH
message UserAuthentication {
  uint64 user_id = 1;
  string auth_token = 2;
}

//
// Notifications
//

// EVENT CREATED
/*message EventCreated {
  Event event = 1;
}*/

// EVENT CANCELLED
message EventCancelled {
  uint64 event_id = 1;
  string reason = 2;
}

// EVENT EXPIRED
message EventExpired {
  uint64 event_id = 1;
}

// EVENT DATE MODIFIED
// EVENT MESSAGE MODIFIED
// EVENT MODIFIED
message EventModified {
  uint64 event_id = 1;
  int64 start_date = 2;
  int64 end_date = 3;
  string message = 4;
}

// INVITATION RECEIVED
/*message InvitationReceived {
  Event event = 1;
}*/

// INVITATION CANCELLED
message InvitationCancelled {
  uint64 event_id = 1;
}

// ATTENDANCE STATUS
message AttendanceStatus {
  uint64 event_id = 1;
  repeated EventParticipant attendance_status = 2;
}

// EVENT CHANGE DATE PROPOSED
// EVENT CHANGE MESSAGE PROPOSED
// EVENT CHANGE PROPOSED
message EventChangeProposed {
  uint64 event_id = 1;
  uint32 change_id = 2;
  int64 start_date = 3;
  int64 end_date = 4;
  string message = 5;
}

// VOTING STATUS
// VOTING FINISHED
message VotingStatus {
  uint64 event_id = 1;
  uint32 change_id = 2;
  int64 start_date = 3;
  int64 end_date = 4;
  int64 elapsed_time = 5;
  uint32 votes_received = 6;
  uint32 votes_total = 7;
  bool finished = 8; // 0) Ongoing voting, 1) finished voting
}

// CHANGE ACCEPTED
message ChangeAccepted {
  uint64 event_id = 1;
  uint32 change_id = 2;
}

// CHANGE DISCARDED
message ChangeDiscarded {
  uint64 event_id = 1;
  uint32 change_id = 2;
}

// ACCESS GRANTED
message AccessGranted {
  uint64 user_id = 1;
  string auth_token = 2;
}

// OK
message Ok {
  int32 type = 1;
}

// ERROR
message Error {
  int32 type = 1;
  int32 error = 2;
}

//
// Requests
//

// PING
message Ping {
  int64 current_time = 1;
}

// READ EVENT
message ReadEvent {
  uint64 event_id = 1;
}

// LIST AUTHORED EVENTS
// LIST PRIVATE EVENTS
// LIST PUBLIC EVENTS
// HISTORY AUTHORED EVENTS
// HISTORY PRIVATE EVENTS
// HISTORY PUBLIC EVENTS
message ListCursor {
  uint32 cursor = 1;
}

message ListPublicEvents {
  Location user_coordinates = 1;
  uint32 range_in_meters = 2;
  ListCursor cursor = 3;
}

// USER FRIENDS
/*message UserFriends {

}*/

//
// Responses
//

// PONG
message Pong {
  int64 current_time = 1;
}

// EVENT INFO
/*message EventInfo {
  Event event = 1;
  repeated EventParticipant attendance_status = 2;
}*/

// EVENTS LIST
message EventsList {
  repeated Event event = 1;
  // Optionally add cursor field
}

// FRIENDS LIST
message FriendsList {
  repeated Friend friends = 1;
}
